// Generated by CoffeeScript 1.3.3
(function() {
  var Client, apiClient, _;

  _ = require('underscore');

  apiClient = require('./api_client');

  Client = (function() {

    function Client(options) {
      this.api = new apiClient.APIClient(options);
    }

    Client.prototype.queue = function(name) {
      return new Client(_.extend({}, this.api.options, {
        queue_name: name
      }));
    };

    Client.prototype.queues = function(options, cb) {
      return this.api.queuesList(options, function(error, body) {
        if (!(error != null)) {
          return cb(error, body);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.info = function(cb) {
      return this.api.queuesGet(this.api.options.queue_name, function(error, body) {
        if (!(error != null)) {
          return cb(error, body);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.clear = function(cb) {
      return this.api.queuesClear(this.api.options.queue_name, function(error, body) {
        if (!(error != null)) {
          return cb(error, body);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.post = function(messages, cb) {
      if (!(messages instanceof Array)) {
        messages = [messages];
      }
      messages = _.map(messages, function(message) {
        if (typeof message === 'string') {
          return {
            body: message
          };
        } else {
          return message;
        }
      });
      return this.api.messagesPost(this.api.options.queue_name, messages, function(error, body) {
        if (!(error != null)) {
          return cb(error, messages.length === 1 ? body.ids[0] : body.ids);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.get = function(options, cb) {
      return this.api.messagesGet(this.api.options.queue_name, options, function(error, body) {
        if (!(error != null)) {
          return cb(error, (!(options.n != null)) || options.n === 1 ? body.messages[0] : body.messages);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.del = function(message_id, cb) {
      return this.api.messagesDelete(this.api.options.queue_name, message_id, function(error, body) {
        if (!(error != null)) {
          return cb(error, body);
        } else {
          return cb(error, body);
        }
      });
    };

    return Client;

  })();

  module.exports.Client = Client;

}).call(this);
